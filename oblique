#!/opt/homebrew/bin/bash
#
# Random Oblique Strategy Selector
#
# Ben Antonow <antonow@umich.edu>

set -Eeuo pipefail
# Path to the file containing the strategies
STRATEGIES_FILE=~/bin/oblique-strategies/strategies.txt

# Check if the file exists
if [[ ! -f "$STRATEGIES_FILE" ]]; then
    echo "Strategies file not found at $STRATEGIES_FILE"
    exit 1
fi

# Method 1: Using shuf (preferred if available)
if command -v shuf >/dev/null 2>&1; then
    STRATEGY=$(shuf -n 1 "$STRATEGIES_FILE")
else
    # Method 2: Using awk and RANDOM (alternative)
    NUM_STRATEGIES=$(wc -l < "$STRATEGIES_FILE")
    RANDOM_LINE=$(( RANDOM % NUM_STRATEGIES + 1 ))
    STRATEGY=$(awk "NR==$RANDOM_LINE" "$STRATEGIES_FILE")
fi

# Replace '\n' sequences with actual newlines
STRATEGY=$(printf '%b' "$STRATEGY")

# Split the strategy into an array of lines
readarray -t LINES <<< "$STRATEGY"

# Find the maximum length of the lines
MAX_LEN=0
for LINE in "${LINES[@]}"; do
    LINE_LEN=${#LINE}
    (( LINE_LEN > MAX_LEN )) && MAX_LEN=$LINE_LEN
done

# Define padding
PADDING=2  # Number of spaces on each side of the text inside the rectangle

# Compute the width of the rectangle
WIDTH=$((MAX_LEN + 2 * PADDING + 2))  # +2 for the border characters '|'

# Get terminal width
TERM_WIDTH=$(tput cols)

# Compute the left margin to center the rectangle
MARGIN=$(( (TERM_WIDTH - WIDTH) / 2 ))

# Ensure margin is at least zero
(( MARGIN < 0 )) && MARGIN=0

# Compute the available width inside the rectangle (excluding borders)
AVAIL_WIDTH=$((WIDTH - 2))

# Construct the top and bottom borders
TOP_BORDER="+"$(printf '%.0s-' $(seq 1 $((WIDTH - 2))))"+"

# Construct empty padding line
EMPTY_LINE="|"$(printf ' %.0s' $(seq 1 $AVAIL_WIDTH))"|"

# Output the rectangle
printf "%*s\n" $((WIDTH + MARGIN)) "$TOP_BORDER"
printf "%*s\n" $((WIDTH + MARGIN)) "$EMPTY_LINE"

for LINE in "${LINES[@]}"; do
    LINE="${LINE#"${LINE%%[![:space:]]*}"}"
    LINE="${LINE%"${LINE##*[![:space:]]}"}"
    
    LINE_LEN=${#LINE}
    PADDING_SPACE=$((AVAIL_WIDTH - LINE_LEN))
    LEFT_PADDING=$(( (PADDING_SPACE + 1) / 2 ))
    RIGHT_PADDING=$(( PADDING_SPACE / 2 ))

    # Construct the line with the centered text
    TEXT_LINE="|"
    TEXT_LINE+=$(printf '%*s' $LEFT_PADDING '')
    TEXT_LINE+="$LINE"
    TEXT_LINE+=$(printf '%*s' $RIGHT_PADDING '')
    TEXT_LINE+="|"

    printf "%*s\n" $((WIDTH + MARGIN)) "$TEXT_LINE"
done

printf "%*s\n" $((WIDTH + MARGIN)) "$EMPTY_LINE"
printf "%*s\n" $((WIDTH + MARGIN)) "$TOP_BORDER"
